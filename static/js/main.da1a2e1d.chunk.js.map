{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useEffect","ZoomMtg","setZoomJSLib","preLoadWasm","prepareJssdk","qs","queryString","parse","window","location","search","meetConfig","apiKey","meetingNumber","mn","userEmail","userName","un","password","role","signature","setTimeout","console","log","JSON","stringify","init","leaveUrl","isSupportAV","isSupportChat","success","join","passWord","record","showRecordFunction","show","error","joinMeeting","className","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"mQAkFeA,MAhEf,WA6DE,OA5BAC,qBAAU,WACRC,UAAQC,aAAa,oCAAqC,OAC1DD,UAAQE,cACRF,UAAQG,eACR,IAAMC,EAAKC,IAAYC,MAAMC,OAAOC,SAASC,QAEvCC,EAAc,CAClBC,OAAQP,EAAGO,OACXC,cAAeR,EAAGS,GAClBC,UAAW,GACXC,SAAWX,EAAGY,GAAIZ,EAAGY,GAAG,OACxBC,SAAUb,EAAGa,SACbC,KAAMd,EAAGc,KACTC,UAAWf,EAAGe,WAGlBC,YAAW,YAhDX,SAAqBV,GACnBW,QAAQC,IAAI,iBAAmBC,KAAKC,UAAUd,IAC9CV,UAAQyB,KAAK,CACXC,SAAU,mBACVC,aAAa,EACbC,eAAe,EACfC,QAAS,SAAUA,GACjBR,QAAQC,IAAI,gBAAiBO,GAC7B7B,UAAQ8B,KAAK,CACXlB,cAAeF,EAAWE,cAC1BG,SAAUL,EAAWK,SACrBI,UAAWT,EAAWS,UACtBR,OAAQD,EAAWC,OACnBoB,SAAUrB,EAAWO,SAErBY,QAAS,SAACA,GACR7B,UAAQgC,OAAO,CACbA,QAAQ,IAGVhC,UAAQiC,mBAAmB,CACzBC,MAAM,KAIVC,MAAO,SAACA,GACNd,QAAQC,IAAIa,SAuBpBC,CAAY1B,KACX,OAQA,IAEI,yBAAK2B,UAAU,OAAf,iBCnEWC,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjB,GACLd,QAAQc,MAAMA,EAAMkB,c","file":"static/js/main.da1a2e1d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ZoomMtg } from \"@zoomus/websdk\";\r\nimport queryString from 'query-string';\r\n\r\nlet apiKeys = {\r\n  apiKey: process.env.REACT_APP_ZOOM_API_KEY,\r\n  apiSecret: process.env.REACT_APP_ZOOM_API_SECRET_KEY,\r\n};\r\nlet meetConfig = {\r\n  apiKey: apiKeys.apiKey,\r\n  meetingNumber: \"75691557589\",\r\n  userName: \"Example\",\r\n  userEmail: \"example@example.com\", // must be the attendee email address\r\n  passWord: \"1234\",\r\n  role: 0,\r\n  signatur:''\r\n};\r\n\r\nfunction App() {\r\n  function joinMeeting(meetConfig) {\r\n    console.log('Calling Init: ' + JSON.stringify(meetConfig));\r\n    ZoomMtg.init({\r\n      leaveUrl: \"https://shl.com/\",\r\n      isSupportAV: true,\r\n      isSupportChat: true,\r\n      success: function (success) {\r\n        console.log(\"Init Success \", success);\r\n        ZoomMtg.join({\r\n          meetingNumber: meetConfig.meetingNumber,\r\n          userName: meetConfig.userName,\r\n          signature: meetConfig.signature,\r\n          apiKey: meetConfig.apiKey,\r\n          passWord: meetConfig.password,\r\n\r\n          success: (success) => {\r\n            ZoomMtg.record({\r\n              record: true\r\n            });\r\n\r\n            ZoomMtg.showRecordFunction({\r\n              show: true\r\n            });\r\n          },\r\n\r\n          error: (error) => {\r\n            console.log(error);\r\n          },\r\n        });\r\n      },\r\n    });\r\n  }\r\n  useEffect(() => {\r\n    ZoomMtg.setZoomJSLib(\"https://source.zoom.us/1.7.10/lib\", \"/av\");\r\n    ZoomMtg.preLoadWasm();\r\n    ZoomMtg.prepareJssdk();\r\n    const qs = queryString.parse(window.location.search);\r\n    \r\n    const meetConfig =  {\r\n      apiKey: qs.apiKey,\r\n      meetingNumber: qs.mn,\r\n      userEmail: '',\r\n      userName: (qs.un)?qs.un:'Test',\r\n      password: qs.password,\r\n      role: qs.role,\r\n      signature: qs.signature\r\n  }\r\n\r\n  setTimeout(() => {\r\n    joinMeeting(meetConfig);\r\n  }, 1000);\r\n\r\n    /**\r\n     * You should not visible api secret key on frontend\r\n     * Signature must be generated on server\r\n     * https://marketplace.zoom.us/docs/sdk/native-sdks/web/essential/signature\r\n     */\r\n    //joinMeeting(meetConfig);\r\n  }, []);\r\n\r\n  return <div className=\"App\">Zoom Testing</div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}